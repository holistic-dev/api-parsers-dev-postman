{
	"info": {
		"_postman_id": "5367ac9c-b250-463a-864f-0a14b140c452",
		"name": "api.parsers.dev postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "parse",
			"item": [
				{
					"name": "postgresql",
					"item": [
						{
							"name": "/api/parse/postgresql/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sql\": \"CREATE TABLE t();SELECT 1; SELECT 1 FROM ; SELECT 2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.parsers.dev/api/v1/parse/postgresql/",
									"protocol": "https",
									"host": [
										"api",
										"parsers",
										"dev"
									],
									"path": [
										"api",
										"v1",
										"parse",
										"postgresql",
										""
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "snowflake",
					"item": [
						{
							"name": "/api/parse/snowflake/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sql\": \"SELECT 1; SELECT 1 FROM ; SELECT 2\"\t\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.parsers.dev/api/v1/parse/snowflake/",
									"protocol": "https",
									"host": [
										"api",
										"parsers",
										"dev"
									],
									"path": [
										"api",
										"v1",
										"parse",
										"snowflake",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cypher",
					"item": [
						{
							"name": "/api/parse/cypher/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// //1000 ms is a maximum allowed value according to requirements ",
											"// maximumResponseTime = 1000;",
											"// //100 is a number of sent requests according to requirements ",
											"// iterations = 100;",
											"// //100 ms is a delay between requests according to requirements ",
											"// delay = 0;",
											"// //responseTimes is an array for collecting response time values",
											"// responseTimes = [];",
											"// i=0;",
											"// function sendRequest() {",
											"//     pm.sendRequest({",
											"//         url: `http://localhost:60581/api/v1/parse/`,",
											"//         method: 'POST',",
											"//         header: {",
											"//             'Content-Type': 'application/json',",
											"//             'x-api-key': '82ca7c3d186040c338c7e53c6f153a7c277fda95a9013877009414adeb077e3b'",
											"//         },",
											"//         body: {",
											"//             mode: 'raw',",
											"//             raw: JSON.stringify({",
											"//                 \"db\": \"pg\",",
											"//                 \"sql\": \"SELECT 1; SELECT 1 FROM ; SELECT 2\"",
											"//             }), ",
											"//         }",
											"//     }, function (err, res) {",
											"//         console.log(err)",
											"//         pm.test(\"Response time is \" + res.responseTime, function (){",
											"//         pm.expect(err).to.equal(null);",
											"//         pm.expect(res).to.have.property('code', 200);",
											"//         responseTimes.push(res.responseTime);",
											"//         });",
											"//         if (i < iterations - 1) {",
											"//             i++;",
											"//             setTimeout(sendRequest, delay);",
											"//         } ",
											"//         else {",
											"//             percentile90ResponseTime = quantile(responseTimes, 90);",
											"//             pm.test(\"90 percentile response time \" + percentile90ResponseTime + \" is lower than \" + maximumResponseTime + \", the number of iterations is \" + iterations, function () {",
											"//                 pm.expect(percentile90ResponseTime).to.be.below(maximumResponseTime);",
											"//             });",
											"//         }",
											"//     });",
											"// }",
											"// sendRequest();",
											"// function sortNumber(a,b) {",
											"//     return a - b;",
											"// }",
											"// function quantile(array, percentile) {",
											"//     array.sort(sortNumber);",
											"//     index = percentile/100. * (array.length-1);",
											"//     if (Math.floor(index) == index) {",
											"//      result = array[index];",
											"//     } else {",
											"//         j = Math.floor(index)",
											"//         fraction = index - j;",
											"//         result = array[j] + (array[j+1] - array[j]) * fraction;",
											"//     }",
											"//     return result;",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sql\": \"MATCH (node1:Label1)-->(node2:Label2) WHERE node1.propertyA = {value} RETURN node2.propertyA, node2.propertyB; RETURN 1; return ;START n=node:index(foo = 'bar');\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/parse/cypher/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"parse",
										"cypher",
										""
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "compile",
			"item": [
				{
					"name": "postgresql",
					"item": [
						{
							"name": "/api/compile/postgresql/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ddl\": \"CREATE TABLE t (a int); CREATE\",\n    \"dmls\": [\n        \"table t; table t1\",\n        \"table\",\n        \"select * FROM t WHERE a = $1\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.parsers.dev/api/v1/compile/postgresql/",
									"protocol": "https",
									"host": [
										"api",
										"parsers",
										"dev"
									],
									"path": [
										"api",
										"v1",
										"compile",
										"postgresql",
										""
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/compile/postgresql/ (+ast)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ddl\": \"CREATE TABLE t (a int); CREATE\",\n    \"dmls\": [\n        \"table t; table t1\",\n        \"table\",\n        \"select * FROM t WHERE a = $1\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.parsers.dev/api/v1/compile/postgresql/?ast=1",
									"protocol": "https",
									"host": [
										"api",
										"parsers",
										"dev"
									],
									"path": [
										"api",
										"v1",
										"compile",
										"postgresql",
										""
									],
									"query": [
										{
											"key": "ast",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "snowflake",
					"item": [
						{
							"name": "/api/compile/snowflake/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ddl\": \"CREATE TABLE t (a int); CREATE\",\n    \"dmls\": [\n        \"table t; table t1\",\n        \"table\",\n        \"select * FROM t WHERE a = $1\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.parsers.dev/api/v1/compile/snowflake/",
									"protocol": "https",
									"host": [
										"api",
										"parsers",
										"dev"
									],
									"path": [
										"api",
										"v1",
										"compile",
										"snowflake",
										""
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/compile/snowflake/ (+ast)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ddl\": \"CREATE TABLE t (a int); CREATE\",\n    \"dmls\": [\n        \"table t; table t1\",\n        \"table\",\n        \"select * FROM t WHERE a = $1\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.parsers.dev/api/v1/compile/snowflake/?ast=1",
									"protocol": "https",
									"host": [
										"api",
										"parsers",
										"dev"
									],
									"path": [
										"api",
										"v1",
										"compile",
										"snowflake",
										""
									],
									"query": [
										{
											"key": "ast",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}